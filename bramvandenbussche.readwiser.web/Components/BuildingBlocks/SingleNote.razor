@using bramvandenbussche.readwiser.domain.Model
@using Humanizer
@using bramvandenbussche.readwiser.domain.Interface.Business
@using BlazorBootstrap
@inject IHighlightService Service

@if (Highlight != null)
{
    <ConfirmDialog @ref="_dialog" />

    <div class="card border-dark mb-3">
        @if (ShowBookDetails)
        {
            <div class="card-header">
                <h5 class="card-title">
                    @Highlight.Title
                    <small>(by <a href="/authors/@Highlight.Author">@Highlight.Author</a>)</small>
                </h5>
                <h6 class="card-subtitle text-muted">@FormatChapter(Highlight.Chapter)</h6>
            </div>
        }
        else
        {
            <div class="card-header">
                <h6 class="card-subtitle">
                    @FormatChapter(Highlight.Chapter)
                </h6>
            </div>
        }

        <div class="card-body">
            <blockquote class="blockquote">
                @Highlight.Text
            </blockquote>
        </div>

        @if (!string.IsNullOrEmpty(@Highlight.Note) && !EditMode)
        {
            <div class="card-body bg-light text-muted" style="white-space: pre-wrap;">
                @Highlight.Note
            </div>
        }
        
        @if (EditMode)
        {
            <div class="card-body bg-light text-black">
                <textarea class="form-control" @bind="@Highlight.Note" placeholder="Thoughts on this highlighted text?"></textarea>
            </div>
        }

        <div class="card-footer text-muted">
            <div class="row">
                <div class="col-lg-10">
                    <small title="@Highlight.RaisedTime.ToString("dddd dd MMMM yyyy HH:mm:ss")">Created @Highlight.RaisedTime.Humanize()</small>
                </div>

                <div class="col-lg-2 text-end">
                    @if (EditMode)
                    {
                        <button class="btn btn-sm bg-success" @onclick="() => Save()">Save</button>
                        <button class="btn btn-sm bg-info" @onclick="() => ToggleEditMode(false)">Cancel</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-link text-warning" @onclick="() => ToggleEditMode(true)">Edit</button>
                        <button class="btn btn-sm btn-link text-danger" @onclick="ShowConfirmationAsync">Delete</button>
                    }
                </div>
            </div>

        </div>
    </div>
}

@code {
    [Parameter]
    public Highlight? Highlight { get; set; }

    [Parameter]
    public bool ShowBookDetails { get; set; } = false;

    public bool EditMode { get; set; } = false;

    private ConfirmDialog _dialog = default!;

    private void ToggleEditMode(bool mode) => EditMode = mode;

    private async Task Save()
    {
        await Service.UpdateHighlight(Highlight);
        ToggleEditMode(false);
    }

    private async Task ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes, do it",
            YesButtonColor = ButtonColor.Danger,
            NoButtonText = "No, keep the record",
            NoButtonColor = ButtonColor.Success
        };

        var confirmation = await _dialog.ShowAsync(
            title: "Are you sure you want to delete this highlight?",
            message1: "This will permanently delete the record. Once deleted, this can not be rolled back.",
            message2: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await Service.DeleteHighlight(Highlight.NoteId);
            Highlight = null;
        }
    }


    private string FormatChapter(string? chapter)
    {
        if (string.IsNullOrEmpty(chapter))
            return "No chapter";

        if (chapter.Length <= 4)
            return $"Chapter {chapter}";

        return chapter;
    }

}